AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  integradora9noBack

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
  Api:
    Auth:
      DefaultAuthorizer: NONE

Resources:

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedLayer
      Description: Common dependencies
      ContentUri: shared/
      CompatibleRuntimes:
        - python3.9

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:GetLayerVersion
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref SharedLayer
                  - arn:aws:logs:*:*:*
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:bdcred-NiVqcy"
        - PolicyName: CognitoAccess1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminInitiateAuth
                Resource: arn:aws:cognito-idp:us-east-1:058264551202:userpool/us-east-1_1oU0zkg6n
        - PolicyName: CognitoAccess2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:GetUser
                  - cognito-idp:ListUsers
                Resource: arn:aws:cognito-idp:us-east-1:058264551202:userpool/us-east-1_1oU0zkg6n


  UsersApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UsersApi
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:us-east-1:058264551202:userpool/us-east-1_1oU0zkg6n

  ProductsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ProductsApi
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:us-east-1:058264551202:userpool/us-east-1_1oU0zkg6n

  PaymentMethodsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: PaymentMethodsApi
      StageName: Prod

  AddressesApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: AddressesApi
      StageName: Prod

  PurchasesApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: PurchasesApi
      StageName: Prod

  LoginApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: LoginApi
      StageName: Prod


  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        LoginFunction:
          Type: Api
          Properties:
            RestApiId: !Ref LoginApi
            Path: /login
            Method: post

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register_user/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        RegisterUserFunction:
          Type: Api
          Properties:
            RestApiId: !Ref LoginApi
            Path: /register_user
            Method: post

  SetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: set_password/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SetPasswordFunction:
          Type: Api
          Properties:
            RestApiId: !Ref LoginApi
            Path: /set_password
            Method: post




  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/get_users/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /get_users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  GetUserByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/get_user_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        GetUsersById:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /get_user_by_id/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  InsertUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/insert_user/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        InsertUser:
          Type: Api
          Properties:
            RestApiId: !Ref LoginApi
            Path: /insert_user
            Method: post
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  InsertAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/insert_admin/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        InsertAdmin:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /insert_admin
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  UpdateUserPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/update_user_put/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        UpdateUsersPut:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /update_user_put
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  DeleteUserByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/delete_user_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        DeleteUserById:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /delete_user_by_id/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: products/get_products/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ProductsApi
            Path: /get_products
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  GetProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: products/get_product_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        GetProductById:
          Type: Api
          Properties:
            RestApiId: !Ref ProductsApi
            Path: /get_product_by_id/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  InsertProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: products/insert_product/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        InsertProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ProductsApi
            Path: /insert_product
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  UpdateProductPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: products/update_product_put/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        UpdateProductPut:
          Type: Api
          Properties:
            RestApiId: !Ref ProductsApi
            Path: /update_product_put
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  DeleteProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: products/delete_product_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        DeleteProductById:
          Type: Api
          Properties:
            RestApiId: !Ref ProductsApi
            Path: /delete_product_by_id/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          REGION_NAME: "us-east-1"
          SECRET_NAME: "bdcred"

  GetPaymentMethodsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: paymentMethods/get_paymentMethods/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetPaymentMethods:
          Type: Api
          Properties:
            RestApiId: !Ref PaymentMethodsApi
            Path: /get_paymentMethods
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetPaymentMethodByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: paymentMethods/get_paymentMethod_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetPaymentMethodById:
          Type: Api
          Properties:
            RestApiId: !Ref PaymentMethodsApi
            Path: /get_paymentMethod_by_id/{id}
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetPaymentMethodsByUsersidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: paymentMethods/get_paymentMethods_by_Usersid/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetPaymentMethodsByUsersid:
          Type: Api
          Properties:
            RestApiId: !Ref PaymentMethodsApi
            Path: /get_paymentMethods_by_Usersid/{id}
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  InsertPaymentMethodFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: paymentMethods/insert_paymentMethod/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertPaymentMethod:
          Type: Api
          Properties:
            RestApiId: !Ref PaymentMethodsApi
            Path: /insert_paymentMethod
            Method: post
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  UpdatePaymentMethodPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: paymentMethods/update_paymentMethod_put/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UpdatePaymentMethodPut:
          Type: Api
          Properties:
            RestApiId: !Ref PaymentMethodsApi
            Path: /update_paymentMethod_put
            Method: put
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  DeletePaymentMethodByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: paymentMethods/delete_paymentMethod_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        DeletePaymentMethodById:
          Type: Api
          Properties:
            RestApiId: !Ref PaymentMethodsApi
            Path: /delete_paymentMethod_by_id/{id}
            Method: delete
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetAddressesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addresses/get_addresses/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetAddresses:
          Type: Api
          Properties:
            RestApiId: !Ref AddressesApi
            Path: /get_addresses
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetAddressByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addresses/get_address_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetAddressById:
          Type: Api
          Properties:
            RestApiId: !Ref AddressesApi
            Path: /get_address_by_id/{id}
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetAddressesByUsersidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addresses/get_addresses_by_Usersid/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetAddressesByUsersid:
          Type: Api
          Properties:
            RestApiId: !Ref AddressesApi
            Path: /get_addresses_by_Usersid/{id}
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  InsertAddressFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addresses/insert_address/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertAddress:
          Type: Api
          Properties:
            RestApiId: !Ref AddressesApi
            Path: /insert_address
            Method: post
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  UpdateAddressPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addresses/update_address_put/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UpdateAddressPut:
          Type: Api
          Properties:
            RestApiId: !Ref AddressesApi
            Path: /update_address_put
            Method: put
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  DeleteAddressByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addresses/delete_address_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Events:
        DeleteAddressById:
          Type: Api
          Properties:
            RestApiId: !Ref AddressesApi
            Path: /delete_address_by_id/{id}
            Method: delete
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetPurchasesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: purchases/get_purchases/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetPurchases:
          Type: Api
          Properties:
            RestApiId: !Ref PurchasesApi
            Path: /get_purchases
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetPurchaseByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: purchases/get_purchase_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetPurchaseById:
          Type: Api
          Properties:
            RestApiId: !Ref PurchasesApi
            Path: /get_purchase_by_id/{id}
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  GetPurchasesByUsersidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: purchases/get_purchases_by_Usersid/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetPurchasesByUsersid:
          Type: Api
          Properties:
            RestApiId: !Ref PurchasesApi
            Path: /get_purchases_by_Usersid/{id}
            Method: get
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  InsertPurchaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: purchases/insert_purchase/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertPurchase:
          Type: Api
          Properties:
            RestApiId: !Ref PurchasesApi
            Path: /insert_purchase
            Method: post
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  UpdatePurchasePutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: purchases/update_purchase_put/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UpdatePurchasePut:
          Type: Api
          Properties:
            RestApiId: !Ref PurchasesApi
            Path: /update_purchase_put
            Method: put
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"

  DeletePurchaseByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: purchases/delete_purchase_by_id/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        DeletePurchaseById:
          Type: Api
          Properties:
            RestApiId: !Ref PurchasesApi
            Path: /delete_purchase_by_id/{id}
            Method: delete
      Environment:
        Variables:
          RDS_HOST: "database-mysql-10.cniakw00enzf.us-east-1.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "integradorashopeasy"



Outputs:
  LambdaExecutionRoleArn:
    Description: "Lambda Execution Role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn

  LoginApi:
    Description: "API Gateway endpoint URL for Prod stage for Login function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login/"
  LoginFunction:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn
  RegisterUserApi:
    Description: "API Gateway endpoint URL for Prod stage for Register User function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register_user/"
  RegisterUserFunction:
    Description: "Register User Lambda Function ARN"
    Value: !GetAtt RegisterUserFunction.Arn
  SetPasswordApi:
    Description: "API Gateway endpoint URL for Prod stage for Set Password function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/set_password/"
  SetPasswordFunction:
    Description: "Set Password Function Lambda Function ARN"
    Value: !GetAtt SetPasswordFunction.Arn

  GetUsersApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Users function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_users/"
  GetUsersFunction:
    Description: "Get Users Lambda Function ARN"
    Value: !GetAtt GetUsersFunction.Arn
  GetUserByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Users By Id function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_user_by_id/{id}"
  GetUserByIdFunction:
    Description: "Get Users By Id Lambda Function ARN"
    Value: !GetAtt GetUserByIdFunction.Arn
  InsertUserApi:
    Description: "API Gateway endpoint URL for Prod stage for Insert User function"
    Value: !Sub "https://${LoginApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_user/"
  InsertUserFunction:
    Description: "Insert User Lambda Function ARN"
    Value: !GetAtt InsertUserFunction.Arn
  InsertAdminApi:
    Description: "API Gateway endpoint URL for Prod stage for Insert Admin function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_admin/"
  InsertAdminFunction:
    Description: "Insert Admin Lambda Function ARN"
    Value: !GetAtt InsertAdminFunction.Arn
  UpdateUserPutApi:
    Description: "API Gateway endpoint URL for Prod stage for Update User Put function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_user_put/"
  UpdateUserPutFunction:
    Description: "Update User Put Lambda Function ARN"
    Value: !GetAtt UpdateUserPutFunction.Arn
  DeleteUserByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Delete User By Id function"
    Value: !Sub "https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_user_by_id/{id}"
  DeleteUserByIdFunction:
    Description: "Delete User By Id Lambda Function ARN"
    Value: !GetAtt DeleteUserByIdFunction.Arn

  GetProductsApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Products function"
    Value: !Sub "https://${ProductsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_products/"
  GetProductsFunction:
    Description: "Get Products Lambda Function ARN"
    Value: !GetAtt GetProductsFunction.Arn
  GetProductByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Product By Id function"
    Value: !Sub "https://${ProductsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_product_by_id/{id}"
  GetProductByIdFunction:
    Description: "Get Product By Id Lambda Function ARN"
    Value: !GetAtt GetProductByIdFunction.Arn
  InsertProductApi:
    Description: "API Gateway endpoint URL for Prod stage for Insert Product function"
    Value: !Sub "https://${ProductsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_product/"
  InsertProductFunction:
    Description: "Insert Product Lambda Function ARN"
    Value: !GetAtt InsertProductFunction.Arn
  UpdateProductPutApi:
    Description: "API Gateway endpoint URL for Prod stage for Update Product Put function"
    Value: !Sub "https://${ProductsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_product_put/"
  UpdateProductPutFunction:
    Description: "Update Product Put Lambda Function ARN"
    Value: !GetAtt UpdateProductPutFunction.Arn
  DeleteProductByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Delete Product By Id function"
    Value: !Sub "https://${ProductsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_product_by_id/{id}"
  DeleteProductByIdFunction:
    Description: "Delete Product By Id Lambda Function ARN"
    Value: !GetAtt DeleteUserByIdFunction.Arn

  GetPaymentMethodsApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Payment Methods function"
    Value: !Sub "https://${PaymentMethodsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_paymentMethods/"
  GetPaymentMethodsFunction:
    Description: "Get Payment Methods Lambda Function ARN"
    Value: !GetAtt GetPaymentMethodsFunction.Arn
  GetPaymentMethodByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Payment Method By Id function"
    Value: !Sub "https://${PaymentMethodsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_paymentMethod_by_id/{id}"
  GetPaymentMethodByIdFunction:
    Description: "Get Payment Method By Id Lambda Function ARN"
    Value: !GetAtt GetPaymentMethodByIdFunction.Arn
  GetPaymentMethodsByUsersidApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Payment Methods By Usersid function"
    Value: !Sub "https://${PaymentMethodsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_paymentMethods_by_Usersid/{id}"
  GetPaymentMethodsByUsersidFunction:
    Description: "Get Payment Method By Usersid Lambda Function ARN"
    Value: !GetAtt GetPaymentMethodsByUsersidFunction.Arn
  InsertPaymentMethodApi:
    Description: "API Gateway endpoint URL for Prod stage for Insert Payment Method function"
    Value: !Sub "https://${PaymentMethodsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_paymentMethod/"
  InsertPaymentMethodFunction:
    Description: "Insert Payment Method Lambda Function ARN"
    Value: !GetAtt InsertPaymentMethodFunction.Arn
  UpdatePaymentMethodPutApi:
    Description: "API Gateway endpoint URL for Prod stage for Update Payment Method Put function"
    Value: !Sub "https://${PaymentMethodsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_paymentMethod_put/"
  UpdatePaymentMethodPutFunction:
    Description: "Update Payment Method Put Lambda Function ARN"
    Value: !GetAtt UpdatePaymentMethodPutFunction.Arn
  DeletePaymentMethodByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Delete Payment Method By Id function"
    Value: !Sub "https://${PaymentMethodsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_paymentMethod_by_id/{id}"
  DeletePaymentMethodByIdFunction:
    Description: "Delete Payment Method By Id Lambda Function ARN"
    Value: !GetAtt DeletePaymentMethodByIdFunction.Arn


  GetAddressesApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Addresses function"
    Value: !Sub "https://${AddressesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_addresses/"
  GetAddressesFunction:
    Description: "Get Addresses Lambda Function ARN"
    Value: !GetAtt GetAddressesFunction.Arn
  GetAddressByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Address By Id function"
    Value: !Sub "https://${AddressesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_address_by_id/{id}"
  GetAddressByIdFunction:
    Description: "Get Address By Id Lambda Function ARN"
    Value: !GetAtt GetAddressByIdFunction.Arn
  GetAddressesByUsersidApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Addresses By Usersid function"
    Value: !Sub "https://${AddressesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_addresses_by_Usersid/{id}"
  GetAddressesByUsersidFunction:
    Description: "Get Addresses By Usersid Lambda Function ARN"
    Value: !GetAtt GetAddressesByUsersidFunction.Arn
  InsertAddressApi:
    Description: "API Gateway endpoint URL for Prod stage for Insert Address function"
    Value: !Sub "https://${AddressesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_address/"
  InsertAddressFunction:
    Description: "Insert Address Lambda Function ARN"
    Value: !GetAtt InsertAddressFunction.Arn
  UpdateAddressPutApi:
    Description: "API Gateway endpoint URL for Prod stage for Update Address Put function"
    Value: !Sub "https://${AddressesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_address_put/"
  UpdateAddressPutFunction:
    Description: "Update Address Put Lambda Function ARN"
    Value: !GetAtt UpdateAddressPutFunction.Arn
  DeleteAddressByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Delete Address By Id function"
    Value: !Sub "https://${AddressesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_address_by_id/{id}"
  DeleteAddressByIdFunction:
    Description: "Delete Address By Id Lambda Function ARN"
    Value: !GetAtt DeleteAddressByIdFunction.Arn


  GetPurchasesApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Purchases function"
    Value: !Sub "https://${PurchasesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_purchases/"
  GetPurchasesFunction:
    Description: "Get Purchases Lambda Function ARN"
    Value: !GetAtt GetPurchasesFunction.Arn
  GetPurchaseByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Purchase By Id function"
    Value: !Sub "https://${PurchasesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_purchase_by_id/{id}"
  GetPurchaseByIdFunction:
    Description: "Get Purchase By Id Lambda Function ARN"
    Value: !GetAtt GetPurchaseByIdFunction.Arn
  GetPurchasesByUsersidApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Purchases By Usersid function"
    Value: !Sub "https://${PurchasesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_purchases_by_Usersid/{id}"
  GetPurchasesByUsersidFunction:
    Description: "Get Purchases By Usersid Lambda Function ARN"
    Value: !GetAtt GetPurchasesByUsersidFunction.Arn
  InsertPurchaseApi:
    Description: "API Gateway endpoint URL for Prod stage for Insert Purchase function"
    Value: !Sub "https://${PurchasesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert_purchase/"
  InsertPurchaseFunction:
    Description: "Insert Purchase Lambda Function ARN"
    Value: !GetAtt InsertPurchaseFunction.Arn
  UpdatePurchasePutApi:
    Description: "API Gateway endpoint URL for Prod stage for Update Purchase Put function"
    Value: !Sub "https://${PurchasesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_purchase_put/"
  UpdatePurchasePutFunction:
    Description: "Update Purchase Put Lambda Function ARN"
    Value: !GetAtt UpdatePurchasePutFunction.Arn
  DeletePurchaseByIdApi:
    Description: "API Gateway endpoint URL for Prod stage for Delete Purchase By Id function"
    Value: !Sub "https://${PurchasesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_purchase_by_id/{id}"
  DeletePurchaseByIdFunction:
    Description: "Delete Purchase By Id Lambda Function ARN"
    Value: !GetAtt DeletePurchaseByIdFunction.Arn